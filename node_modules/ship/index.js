var VectorFactory = require("vector");
var projectilePool = require("pool").Projectile;
var abilities = require("abilities");

var oX = VectorFactory.CreateVector(0,0,1,0);
/* --- Ship --- */
function Ship() {
    this.hp = 0;
    this.maxhp = 0;
    this.id = Math.random();
    this.type = "";
    this.x = 0;
    this.y = 0;
    this.angle = 0;
    this.maxspeed = 0;
    this.acceleration = 0;
    this.speed = VectorFactory.CreateVector();
    this.state = "dead";
    this.respawnTimer = 0;
    this.name = "";
    this.abilities = [];
    this.projectileType = "";
    this.collisionRadius = 0;
    this.fireCooldown = 0;
    this.fireTimer = 0;
}

Ship.prototype.PreventGoingOutOfScreen = function () {
    if (this.x < 0)
        this.x = 0;
    if (this.y < 0)
        this.y = 0;
    if (this.x > 1920)
        this.x = 1920;
    if (this.y > 1080)
        this.y = 1080;
};

Ship.prototype.MoveShip = function () {
    this.x += this.speed.x;
    this.y += this.speed.y;
};

Ship.prototype.CalculateDirections = function (input) {
    var shipAcceleration = VectorFactory.CreateVector(this.x, this.y,
        input.x, input.y,
        this.acceleration);

    this.speed.Add(shipAcceleration);
    this.fireTimer--;
    
    if (this.speed.magnitude > this.maxspeed)
        this.speed.Limit(this.maxspeed);
        
    this.angle = oX.AngleBetween(this.speed);
};

Ship.prototype.Damage = function (damage, dealer) {
    if (this.type == 'frigate-ship' && this.shieldActive)
        damage = Math.min(damage, 1);
    
    this.hp -= damage;
    
    if (this.hp < 0) {
        this.state = "dead";
        this.respawnTimer = 100;
        this.OnDeath(dealer.ship.name);
    }
};

Ship.prototype.OnDeath = function (name) {};

Ship.prototype.Fire = function (input) {
    if (this.fireTimer <= 0)
    {
        if (this.overdrive)
        {
            projectilePool.ActivateProjectile(this.x, this.y, this.speed, this.id, this.projectileType);    
            projectilePool.ActivateProjectile(this.x, this.y, this.speed, this.id, this.projectileType);    
        }
        projectilePool.ActivateProjectile(this.x, this.y, this.speed, this.id, this.projectileType);    
        this.fireTimer = this.fireCooldown;
    }
};

Ship.prototype.UseAbility = function (number) {
     abilities.Activate(this.abilities[number], this.x, this.y, this.speed, this.id);
};

Ship.prototype.Respawn = function() {
    this.hp = this.maxhp;
    this.x = 1920 * Math.random();
    this.y = 1080 * Math.random();
    this.angle = 0;
    this.speed = VectorFactory.CreateVector();
    this.state = "alive";
};

/* --- Ship factory --- */

function ShipFactory() {}

ShipFactory.prototype.DetectStats = function(ship) {
    switch (ship.type) {
        case "frigate-ship":
            ship.maxhp = ship.hp = 170;
            ship.maxspeed = 3;
            ship.acceleration = 0.2;
            ship.projectileType = "small-rocket-projectile";
            ship.abilities.push("SHIELD");
            ship.collisionRadius = 20;
            ship.fireCooldown = 50;
            break;
        case "destroyer-ship":
            ship.maxhp = ship.hp = 250;
            ship.maxspeed = 2;
            ship.acceleration = 0.1;
            ship.projectileType = "singularity-projectile";
            ship.abilities.push("REPAIR");
            ship.collisionRadius = 25;
            ship.fireCooldown = 25;
            break;
        case "interceptor-ship":
            ship.maxhp = ship.hp = 60;
            ship.maxspeed = 8;
            ship.acceleration = 0.5;
            ship.projectileType = "plasma-projectile";
            ship.abilities.push("MINE");
            ship.collisionRadius = 10;
            ship.overdrive = false;
            break;
        default:
            ship.maxhp = ship.hp = 100;
            ship.maxspeed = 5;
            ship.acceleration = 0.3;
            ship.abilities.push("ROCKET");
            ship.abilities.push("MINE");
            ship.projectileType = "common-projectile";
            ship.collisionRadius = 15;
    }
};

ShipFactory.prototype.CreateShip = function(type) {
    var ship = new Ship();
    ship.type = type || "common-ship";
    this.DetectStats(ship);
    return ship;
};

/* --- Exports --- */
module.exports = new ShipFactory();