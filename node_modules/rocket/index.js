var VectorFactory = require("vector");
var oX = VectorFactory.CreateVector(0,0,1,0);
var pools = require("pool");


function Rocket() {
    this.id = Math.random();
    this.target = undefined;
    this.targetingRadius = 0;
    this.distance = Infinity;
    this.damage = 0;
    this.acceleration = 0;
    this.type = "";
    this.x = 0;
    this.y = 0;
    this.maxspeed = 0;
    this.speed = VectorFactory.CreateVector();
    this.markedForRemove = false;
    this.emitter = null;
    this.angle = 0;
    this.lifeSpan = 0;
    this.collisionRadius = 0;
}

Rocket.maxspeed = 7;

Rocket.prototype.FindTarget = function(ships) {
    var nearest = undefined;
    this.distance = Infinity;
    
    var enemies = ships.filter(s => s && s.state != "dead" && s.id != this.emitter);
    var enemyMines = pools.Mine.projectiles.filter(m => m.isActive && m.entity.emitter != this.emitter).map(m => m.entity);
    
    var targets = enemies.concat(enemyMines);
    
    if (targets.length == 0)
        return;
    
    for (var i = 0; i < targets.length; i++) {
        
        var dist = VectorFactory.CreateVector(this.x, this.y, targets[i].x, targets[i].y);
        if (dist.magnitude < this.distance && dist.magnitude < this.targetingRadius)
        {
            nearest = targets[i];
            this.distance = dist.magnitude;
        }
        
    }  
    this.target = nearest;
};

Rocket.prototype.Move = function () {
    function spread() {
        return Math.random() * (1.1 - 0.9) + 0.9;
    }

    if(this.target)
    {
        var acceleration = VectorFactory.CreateVector(this.x, this.y,
        this.target.x * spread(), this.target.y * spread(),
        this.acceleration);

        this.speed.Add(acceleration);
    
        if (this.speed.magnitude > this.maxspeed)
          this.speed.Limit(this.maxspeed);
    }
    
    
    this.x += this.speed.x;
    this.y += this.speed.y;
    
    this.angle = oX.AngleBetween(this.speed);
};

Rocket.prototype.CalculateDirections = function (ships) {
    if (this.lifeSpan-- < 0) {
        this.markedForRemove = true;
        return;
    }
    if (this.emitter == null)
        return;
    this.FindTarget(ships);
    this.Move();
    this.PreventGoingOutOfScreen();
};

Rocket.prototype.PreventGoingOutOfScreen = function () {
    if ((this.x < 0) || (this.y < 0) || (this.x > 1920) || (this.y > 1080))
        this.markedForRemove = true;
};

/* --- Rocket factory --- */

function RocketFactory() {}

RocketFactory.prototype.DetectStats = function (projectile, timeScale) {
    switch (projectile.type) {
        default:
            projectile.targetingRadius = 250;
            projectile.distance = Infinity;
            projectile.damage = 10;
            projectile.acceleration = 0.6;
            projectile.maxspeed = 7;
            projectile.lifeSpan = 250;
            projectile.collisionRadius = 5;
    }
};

RocketFactory.prototype.CreateRocket = function (x,y, direction, emitter, type, timeScale) {
    var projectile = new Rocket();
    
    projectile.type = type || "common-rocket-projectile";
    this.DetectStats(projectile, timeScale);
    projectile.x = x;
    projectile.y = y;
    projectile.speed = VectorFactory.CreateVector(0, 0, direction.x, direction.y, projectile.maxspeed / 2);
    projectile.emitter = emitter;
    
    return projectile;
};

module.exports = new RocketFactory();