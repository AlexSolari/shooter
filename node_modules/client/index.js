var ShipFactory = require("ship");
/* --- Client --- */

function Client(socket) {
    this.id = Math.random();
    this.ship = ShipFactory.CreateShip(),
    this.score = 0;
    this.input = {
        clicked: false,
        x: 0,
        y: 0
    };
    this.socket = socket;
    this.rocketsActive = 0;
    this.rocketCooldown = 0;
    this.mineCooldown = 0;
    this.active = false;
    
    this.Send("ship-id", this.ship.id);
}

Client.prototype.Start = function () {
    this.active = true;
}

Client.prototype.AddRequestHandler = function(type, handler) {
    this.socket.on(type, handler);
};

Client.prototype.Send = function(type, data) {
    this.socket.emit(type, data);
};

Client.prototype.Update = function() {
    if (!this.active)
        return;
    
    if (this.ship.state == "dead") {
        if (this.ship.respawnTimer-- < 0) {
            this.ship.Respawn();
        }
        return;
    }
    
    if (this.input.clicked) {
        this.ship.Fire();
    }
    if (this.input.rocket && this.rocketsActive < 2 && this.rocketCooldown < 0) {
        this.ship.Rocket();
        this.rocketsActive++;
        this.rocketCooldown = 50;
    }
    if (this.input.mine && this.mineCooldown < 0) {
        this.ship.Mine();
        this.mineCooldown = 100;
    }
    
    this.rocketCooldown--;
    this.mineCooldown--;
    this.ship.CalculateDirections(this.input);
    this.ship.MoveShip();
    this.ship.PreventGoingOutOfScreen();
};

/* --- ClientFactory --- */

function ClientFactory() {}

ClientFactory.prototype.CreateClient = function(socket) {
    return new Client(socket);
};

/* --- Exports --- */

module.exports = new ClientFactory();
