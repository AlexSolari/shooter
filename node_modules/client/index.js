var ShipFactory = require("ship");
/* --- Client --- */

function Client(socket, controllByAI) {
    controllByAI = controllByAI || false;
    
    this.id = Math.random();
    this.ship = null,
    this.score = 0;
    this.input = {
        clicked: false,
        x: 0,
        y: 0
    };
    this.socket = socket;
    this.rocketsActive = 0;
    this.firstCooldown = 0;
    this.secondCooldown = 0;
    this.active = false;
    this.realtimeScaleCoefficient = 1;
    
    if (controllByAI) {
        this.InitializeAI();
    }
}

Client.prototype.InitializeAI = function () {
    var type;
    var rnd = Math.random();
    if (rnd < 0.25)
        type = 'common-ship';
    else if (rnd < 0.5)
        type = 'destroyer-ship';
    else if (rnd < 0.75)
        type = 'interceptor-ship';
    else
        type = 'frigate-ship';
        
    this.Start(type);
    this.ProcessAI();
    
    var parts  = ['RA','AXX','TE','OA','MI','SE','QA','VO','UP'];
    var length = 3;
    var result = "";
    for(;length--;)
    {
    	result += parts[Math.floor(Math.random() * parts.length)];
    }
    this.ship.name = result + ":BOT";
};

Client.prototype.Start = function (type) {
    var self = this;
    this.active = true;
    this.ship = ShipFactory.CreateShip(type);
    this.ship.OnDeath = function(name) {
      self.Broadcast("kill", {died: self.ship.name, killer: name});
    };
    
    this.Send("ship-id", this.ship.id);
};

Client.prototype.Broadcast = function (type, data) {
    
};

Client.prototype.AddRequestHandler = function(type, handler) {
    if (this.socket)
        this.socket.on(type, handler);
};

Client.prototype.Send = function(type, data) {
    if (this.socket)
        this.socket.emit(type, data);
};

Client.prototype.ProcessAbilities = function (input) {
    this.firstCooldown--;
    this.secondCooldown--;
    switch (this.ship.type) {
        case 'common-ship':
            //rockets
            if (this.input.firstAbility && this.rocketsActive < 2 && this.firstCooldown < 0) {
                this.ship.UseAbility(0);
                this.rocketsActive++;
                this.firstCooldown = 50;
            }
            
            //mines
            if (this.input.secondAbility && this.secondCooldown < 0) {
                this.ship.UseAbility(1);
                this.secondCooldown = 50;
            }
            break;
        case 'destroyer-ship':
            //Self heal
            if (this.input.firstAbility && this.firstCooldown < 0) {
                this.ship.hp += 25;
                this.firstCooldown = 200;
            }
            //Jump
            if (this.input.secondAbility && this.secondCooldown < 0) {
                this.ship.savedSpd = this.ship.maxspeed;
                this.ship.savedAcc = this.ship.acceleration;
                
                this.ship.maxspeed = 500;
                this.ship.acceleration = 0.3;
                this.secondCooldown = 200;
            }
            if (this.secondCooldown == 50)
            {
                this.ship.maxspeed = this.ship.savedSpd;
                this.ship.acceleration = this.ship.savedAcc;
            }
            //Passive regen
            if (this.ship.hp < this.ship.maxhp)
                this.ship.hp += 0.025;
            if (this.ship.hp > this.ship.maxhp)
                this.ship.hp = this.ship.maxhp;
                break;
        case 'interceptor-ship':
            //mines
            if (this.input.firstAbility && this.firstCooldown < 0) {
                this.ship.UseAbility(0);
                this.firstCooldown = 50;
            }
            
            //afterburners
            if (this.input.secondAbility && this.secondCooldown < 0) {
                this.ship.savedSpd = this.ship.maxspeed;
                this.ship.savedAcc = this.ship.acceleration;
                
                this.ship.acceleration = this.ship.acceleration * 2;
                this.ship.maxspeed = this.ship.maxspeed * 1.3;
                this.ship.overdrive = true;
                this.secondCooldown = 300;
            }
            if (this.secondCooldown == 200)
            {
                this.ship.maxspeed = this.ship.savedSpd;
                this.ship.acceleration = this.ship.savedAcc;
                this.ship.overdrive = false;
            }
            break;
        case "frigate-ship":
            //shield
            if (this.input.firstAbility && this.firstCooldown < 0) {
                this.ship.shieldActive = true;
                this.firstCooldown = 500;
            }
            if (this.firstCooldown == 300) 
            {
                this.ship.shieldActive = false
            }
            //laser guidance
            if (this.input.secondAbility && this.secondCooldown < 0) {
                this.ship.projectileType = 'guided-small-rocket-projectile';
                this.secondCooldown = 500;
            }
            if (this.secondCooldown == 300)
            {
                this.ship.projectileType = "small-rocket-projectile";
            }
        default:
    }
    
};

Client.prototype.Update = function() {
    if (!this.active)
        return;
    
    if (this.ship.state == "dead") {
        if (this.ship.respawnTimer-- < 0) {
            this.ship.Respawn();
        }
        return;
    }
    
    if (this.input.clicked) {
        this.ship.Fire(this.input);
    }
    
    this.ProcessAbilities(this.input);
    this.ship.CalculateDirections(this.input);
    this.ship.MoveShip();
    this.ship.PreventGoingOutOfScreen();
};

Client.prototype.ProcessAI = function() {
    function getNewTarget() {
        return  { x: 1920*Math.random(), y:1080*Math.random(), clicked: true, firstAbility: true, secondAbility: true };
    }
    var self = this;
    self.input = getNewTarget();
    
    setInterval(function () {
        self.input = getNewTarget();
    }, 3000);
};

/* --- ClientFactory --- */

function ClientFactory() {}

ClientFactory.prototype.CreateClient = function(socket, controllByAI, broadcast) {
    var client = new Client(socket, controllByAI);
    client.Broadcast = broadcast;
    return client;
};

/* --- Exports --- */

module.exports = new ClientFactory();
