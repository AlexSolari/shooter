var mineFactory = require("mine");

function MinePool(quantity) {
    console.log("Created minePool");
    for (var i = 0; i < quantity; i++) {
        var wrapper = {
            isActive: false,
            entity: mineFactory.CreateMine(0, 0, null),
        };
        this.projectiles.push(wrapper);
    }
    this.realtimeScaleCoefficient = 1;
}

MinePool.prototype.projectiles = [];

MinePool.prototype.ActivateProjectile = function(x, y, emitter) {
    var wrapper = this.projectiles.find(p => !p.isActive);
    var projectile;
    
    if (!wrapper)
    {
        var newProjectile = {
            isActive: true,
            entity: mineFactory.CreateMine(x, y, emitter, this.realtimeScaleCoefficient),
        };
        this.projectiles.push(newProjectile);
        return newProjectile.entity;
    }
    projectile = wrapper.entity;
    projectile.x = x;
    projectile.y = y;
    projectile.emitter = emitter;
    mineFactory.DetectStats(projectile, this.realtimeScaleCoefficient);
    
    wrapper.isActive = true;
    
    return projectile;
    
};

MinePool.prototype.ReleaseProjectile = function(projectile) { 
    
    var wrapper = this.projectiles.find(p => p.entity.id == projectile.id);

    wrapper.entity.x = 0;
    wrapper.entity.y = 0;
    wrapper.entity.emitter = null;
    wrapper.entity.markedForRemove = false;
    
    wrapper.isActive = false;
};

MinePool.prototype.UpdateActiveProjectiles = function (ships) {
    this.projectiles.filter(p => p.isActive).forEach(p => p.entity.CalculateDirections(ships));
};

module.exports = MinePool; 